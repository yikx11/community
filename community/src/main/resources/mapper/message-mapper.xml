<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id)
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit  #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(id)
        from message
        where id in (
            select max(id)
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
    </select>

    <select id="selectLetters" resultType="message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id != 1
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id != 1
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where to_id = #{userId}
        and status = 0
        and from_id != 1
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

<!--from_id是1的是系统发来的，就是系统通知了，所以私信要把这些排除-->
    
    <insert id="insertMessage" parameterType="Message" keyProperty="id"><!--插入值后会回填id属性-->
        insert into message (<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultType="message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{topic}
        and from_id = 1
        and to_id = #{userId}
        and status != 2
        order by id desc
        limit 1
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from message
        where conversation_id = #{topic}
        and from_id = 1
        and to_id = #{userId}
        and status != 2
    </select>

    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id)
        from message
        where from_id = 1
        and to_id = #{userId}
        and status = 0
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{topic}
        and from_id = 1
        and to_id = #{userId}
        and status != 2
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>